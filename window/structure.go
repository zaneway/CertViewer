package window

import (
	"CertViewer/cert"
	"encoding/base64"
	"encoding/hex"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	. "github.com/zaneway/cain-go/x509"
)

// 构造解析证书核心图形模块
func Structure() *fyne.Container {
	structure := container.NewVBox()
	structure.Resize(fyne.NewSize(300, 300))
	detail := container.NewVBox()
	inputCertEntry := buildInputCertEntry("please input base64/hex certificate data")
	inputCertEntry.SetText("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0hZMDnWdq74LQIQnTl8fAq0wHwYDVR0jBBgwFoAUxwbX3sldOTSUC+cPJhwQq4wahqMwJwYDVR0gBCAwHjAcBgoqgRyG7zIGBAEBMA4wDAYIKwYBBQUHAgEWADALBgQpDAsCBAMwMDEwghQjBgkqgRyG7zICAwIEghQUTUlJUENxQ0NEd1l3Z2c4Q01EOHhFakFRQmdOVkJBTU1DV1JwYkdsMGFHbDFiVEVOTUFzR0ExVUVDd3dFUWtwRFFURU5NQXNHQTFVRUNnd0VRa3BEUVRFTE1Ba0dBMVVFQmhNQ1EwNHdnZ1UxTUE0R0RDcUJISWJ2TWdJREFRRUNBZ09DQlNFQVY3OGVUVzF0MjJ6dS93UVdqZmkwUHBxY0NaMVNEb2wvMDVmSGVvU1g0ZHVWd0E5cWo4eC9yb09xemZXME05azM3RmdCQkFhSmNuM3NVakJ5OTY4RGlkV2dMTUUzNkFqQUlZNGxaaVpaTTR4bjVhM3ZDRFJhaTF1TDlWUFV1dFRLOVFVZ2xQOHdoODdNdEovUDBOa3VDS3lXclBLQ0RVRWFqUnNYOEp1aW53YTBDK3I2NkdvQW4yVkxGMldZSXd5L3RtYkdqZWdvQnpVUEZlQkN3ZGhoTWtLaTM3WEdabVRpNWkxeXdPNTFrcFl1QWhrZjVmNHdTeU5Ic0p1Y25JZXVUdnJtR0Y2M2pUamFHaFp3cWFFNXg0Z3lvMWZUay9uamM1U1J5V1BYdE9QdC9ReW5wcktHQS8xMFRXRjNjZy84cGFCUWFVcU8xMm1MUFpBSXdJaWVLcTdKSGtGa0EyM09od1N2VDJXZlo2Mml1MUlOT1ovMEdDRWRpNUVQVGRQbFArSWJJcWxNTzJXTDZvbUh1SHRjL3R1cUVqN29KQmxkR2VlQy95OGlueUZiamgwaitJWnZKU094VWFxYUwvQTErbUtVdk1EcW1IbVNVNFIvNFBzSDdoMWxwcEVhVmZVNElxOHQ2WEo0eVE0Q2Z3QktOTEZqbkhCS0N4OHVpbWV2THlTaVdHcG5iWExOYnBlQVNPUjhoeUlzS3BYRDI1R2lSV0luRVBxeUdjMTFINTNxc043c25XRm9UVElITzJsT1JtVi82dkZyNGdya2lBM3RKdi84TWZvU242UjRZVmZvZUtEME4xVGVrNU5GL3VWeW90dER0aGRCWXhWQ0pCQzVaQ3pRYjlKdzZIVnBDTGgrSmZGSUhLNHNjczhTMjliTTNpVlk0MDFmSEVIODF1ZUJQMmRMdUpDR1NUWngzRFNLV3llc3JiQk42NDluY1Z6OVhONFhTY1BwcVUzcXdSVmVhUmlyWDFaSEJ6MHZ4MGJEZ2hOb1lkUFN4TnFXaVVnNmNwWjJNdytiRHA4NHZBU1N3Y2FhelgxZFNCNEgwdG9COHpCc3ZUVGdPTUU4WDJnNDRtUGFtaUJxNENJeXc1cjBoUUk1NHNERnF3b0s0YzVnYWw5R1FRb3pUNVQ2eCtYWVNQYnlvZitRUGJuZnlkMk1iNTJ2NTd2eUtRczQ1c1hKazJMeDliNzZTVitWd043ZDAwdnFaTisxakZ4WFA0M0RHTlZtdFI4UldXeHVMYjhBOGhJS2tJWHJrM3dkbnlrT1VJbW5tTDVmOTBIb0h2SkJlZGNGYnhIZ2RjckpHWVdsdzlUbzN1aDIvVk8yRTZPcVJkZDBhTVJyZExIZFF2NVhFSUtSNmRjaUNwY2EycXVDWFlJaERqUEFiY1h2eG05RlYxNjNxbmIzZ2tuWUVuTTBWeCtmWWlnMVRDRDlDc082QytRa3FhczdaY0diMHFoaHhtaVZUekl1Z3l3Uk1DKzc5TUtvWFNUTERsb3VlYVp1cU1YTDgxdnQ0WFlzNnhXYWlNdFZQN0hqbVBpVmllS2xJbXBxU3plVWxtTnZIdFJqZWlqYnJPUWFNbFlvaHc5RzF2RGg1MzI2ZTBOQjdqL2ZXVkR2Y0tPUEpKeWdid0lzckxVbk1URGp4TGZiMXE2cFRTVHZ6ZktCd1pkTGV6SWJGUENGNDBiL21Fc3F6Y1REWjBHV3FYZE1zOUY2TUdqU2E4cDJPOFZpRWpWK3phVCtGRzlZZnozcnhtZk5iMStzY2FyQTdoRHk0dUNuc0lUeDhWaFNSbGZDMmZCWERzR1hyUW9BeHdNTUNWVTlsRFRWRmdFbnRnUyt4U01kTjJ5K2pueEFBSmtBN0RwdUEyZmhqVzZOT2h4OU14WGYwWDhSQU9ULzdrcnJPQVBDZGQrYlN1RHkzdVptdmIrcWpPek9Oc1hhT2kyZTh2bXh4Z2pRR1hCMFcyV2dFd2lCUTl2dkNwdURiTC8wd0c2aHd5VFRheXRRTktkUE5oRkNrdVYwdDRneDZHbHVESG1ZZUsxZ29XUHYweHlmbndvMjB6V1Fab1RhbXBCSkZvZU5TQnpZWUF3OTlkR3FNZkxRQ1doM1RqczJpY05JVGYwWFpPNE9tdzB1TTdIMVpjZGtlTzVNdlc1QmlER0xuMnoxcG1QUURwdXVwOFRESFdOQUVCc2VNZm9rem01cGN0aC9VMG1iRnNGdm5JUXVTMVhDZ1daM0N2cGdZVThoY0UrOXlJeXZqUnIzZFhKSFAvVFJyRHpIbUFmZGhScHpzVEhhSXQzT3ZkalVQeXVHVm1yRXQyRTNTZkVPOURBTkJnc3FnUnlHN3pJQ0F3RUJBUU9DQ1hVQW0wK09idFJrK2dTbm5Yay9VdkN2NlBCemdGYmQ2Zmw1UHBQcXppaUVnZFBlRTVJZ0l1eUw5Z1RuOU0yVTBYWGdtN1cvKzZLRFBpbHQ4SW5FaU80RnYvOFdNUGI2N1VNem5TVWRaMVNsdEVVV1Vuajc3MHphRldjU2ZpOW52VTAzKy9Mb3dhdWRDT3RBd1pEY3RWYTEwVENpQjdUY3pRbWpPWGttaUFscVpkYjZybG1jY3ZqL1RwK1ZQYm1zYnZPZU1WQXQxcUVGU3BEUkVRUnY1Mm1EMk1NQmx5UEhBUEpkKzcvc0s0MFgrWU5GVFVXSjI5WXN6ZG5LMzJnNFBVRzZDSnZpLzdJNWgyTHEzTFEvTU01V1Jrei9pakVtWTQ5OWFqZFlxZzJpa3VqR2lvRnRJMmcyeE9lZ1BnZk1hVzFlbFhZVWVZY1ducnQxTGE0UG5rQk8yWmcwbXZCdDl2eFU0OHBDRW1XalJLOE9CQzM2dVdEUTZXQ1BvL1B6c1RVYUhPeFdHLzF2VzN5T21ReHY4T29KZ0xzMW43WWp5WE83aGRnT3dlOUFwbWNZRVordTI3bWdHZ0JkQ2NJNGx2NCtjR3Q3TEF4cmR3SEhOODNYVVBLVWswTkRKdUZsdG5oUGFvOENTanBQUWJKbW9rV25UNU8xaXdrTlcyMGtqUVN6SVBMRGFSYW9tRHU0NHY2Q2kwUm0xbkxSRHU3Q0svWFJIZkRJMWg2NUV5SkNQSlNqdTcyWktnckxsQXBVNzZUZXg2dVNkYi85NkRlUytLRHIxbnZPVHdOeW5vMUhOcnY4WlZBZVgxd3h0NzgxcFQ4T3N5WUhiUGxIVzJMRFRFMmxFRlYwTVQ3SDdJTUJESDBLM0w5TDFhZkRkVkt4NHprQU1lM0xKOVhodk1qakNtQkFZaUdjTUkzN0RRSkZTeUY3TUgyQkFnN1JVcEpuU1Q3ZEt1Q3NXb0VMNFA0ZXg0YkRlNmZERTZYdTJmWlN5SG9DZ1c2WXlYbytqWjNuK2NxZHl2QVkvNHRDSzQ2aXdNTFRpMnJkTWJ6S3RhTm9oMElZdU1TbWxCcDY4YVI4L25wOXBndmEwTmN5T0JmOHJhUzdXa0lmeDdKSWRGR2U0ZzRucTd5Zm5halg3bnJVd3BraHYzWFVOVmhqYklUNVVESzdVVGQ4aU0rWDN1dzRwVkFwMVg3MXZUdXhqK1NhQmJMSmg2RjdOTHN6UElFaEFWL1RXWU1HUXJaWmdhRFZ3bjJaRm5NbXlUbyttUFdTR1I3RlRKY2E2MkJpRTJZQUtRb0lvU2kvcFZMTFVBTFY5U0lKRHk0eVRha1N2WE9vVkNSQVhyL0Y1cEF1ZlZPdU1SWUN2SUJ0ZjVMbE1JbldQVDMxcVJ0YnQ4bzVXT3NSWXJNWHd3b1dSYk9wdmlRTzhJZGVKdE1acVZiRVJLeU1tUVE3SW5KNHBsYWw1bmhCOVRwTEoyOGVBQnU2SlZLRkJJWm5XekI5QzF2RFdLOXd1bHFLM01Wem00QTM5T2dBNXMzczhmQ2VyUzNFM2h1dFYvaHFkaGNmcThwaWg0V2svRFM0dzkyQ0dQL3JhcXorRW13SEhuZENGMGpudlpWeGZZTXcvRjcvWmpDT0dqSkZOK2JvaGVSdWZ6YTl0MUg0akdUeFFNb3hRUk5wWE52UHo1NjRvUjdybGRsZHhCSDFoL084Rkk1OVJ3ZXBkQWxtZ28wWCtyQ1p1YThHak9VRlo2MjBLOEVXQ1hSeU1IVlNWNmZTRlBRaEtYYXZ2eXhvVUkvZmNQRjFGLzVGdFFLWFAwN241NnZGWlZsdjVaNWpEVnlraXA1dC83cDBXN2t0cERjWWdXQW5pd2R3bjIwM2hnaFRQUG5PZ3ViblRSSGl3SWthZnBGZ0E3S3U1TUpkazF2Z2EzdU1URlBkbjB5ZDJ2SXNuNzVvRlhOcnUzUXEzZCtwTkNrczVHLzJUOVlqWU5xR2FOR2VpYyt6U1V4QytGY2R2N2N5UU9xenM0a0tWdmp4TDZ5OE9HVGV4ZFk3MUNIbFpHRkNWUEF3OWRzcDZYZ0NCdzN3NEg3Y1ViNXEycTRxMW54RnVSeGxoajA4enNSbUVkbi9QSmRuTXB2dmowZWdXR00zUUdTWE1qV1k2Z2VuN1RNOCtlelJZMUlJNzVPQ0MxN0c2NFlYN2kyVlU2MHNOQnhrdzh6eExCUVNVUVRJQWRFMkhWQWhLdUxpTWI0bHI1L05YZ3lGMFNmSmxtKzJXYnU0cURtQkF4RXYvM1R0L1plc0pnK3puZXNLNk9RQWs4YnV5VkRhNEppK0Nza0E1dSs1SGxNNVY3alhKektXOTA4c3NCTWw4L01USDkzaC94enFzWVdzZGtLbXlTdENKZGtka0ZoZ3puRW5Zdm0zVzBXMTZlNHk2cXYycVpWd0RSWVI4ZXRXU1FYU09sUll0eUwxSW5uQm96Tk91UVdyU0Z1NXh6OXlUdnhyNC9nSnhkZFpkNmVzTDk4Zk1kSW83YUloZnh0dk03bWl1Nm1IZmJrblpEQlZpdTFTUmZHTGVWMURXeTdYbnhiaTFxRVhEUXd0VHYrZWtRME5pM09NUjVvZDA1RW1rekhDeXA5L1FRdHhFdFR3SGdLcm94a1ZGdHZCSVpVWG5XK1p6bmlHMkxpZXNHUVlWSW4vKzNZRk5hbFJvT0YxVzVKeCs5ZklMMnRucXJCVHZvR0dIYzZTcnFiNFNOSEhYVGk3VHZFb1JLZ0FsTkhQUER3MUdxTjRnUzFVdHBtc1dlSWZyL1JyK0JEL1ZTa2lxZ3ZEL3B3L2Y5T2c5TjhKRnYvSjJLUWthcjcvRlFneXFTajRBSXA5RnBMTlVDK2RxNGZyQ3RjYk1ZN3RaOUhvZVBZczBJWkZNYnN6ZXdPR28zZTMwZVAxUEg2eU9HRUJJZWt2Z0RSd09UZlpkblhHQjNSOWM1UThhUHBzbUlhdlNLdUJOczVvSklaS3VyS2R3a1pZRGFMZ045TmxWeXdwS0JWNDE0bUV0aERyQThCbEZKejZwRFFtbjBuYUhQOHp4OG4zTC96N1NSK1l2NkFiUEFSM3NqR0EycVdDVERya3BPNndxQ3dDQzJiNHZ3T1VlNytwci9JWmdTOUI3djBFM0FKQ0lEUHdZQjc1elRoandFNk9LdGFmQ1JxMllpWEtabWU0aDJXUnREQ05tNWQvYXEvai9nS0JOOVVTZ1hrdVZSL0FodTQ5YjRXald5SGRJNm1GUjE4VWpab1IwemozNkxrTGx2eW05V1hhYUdGNGVwbmpORzhjV1NSWWYwYW9iZDZLVXhWdEtpM3o0N1d4N1Y5MlpVL2hWMk5GZVZTK2tlZkVGSlBFRytrY1krTnozcjkvc0hOZER5anhDMnVNclgwTXQ0QzBYU09KaUsxTGEzYlpodjFQL0xaTjBtTm1lOGtYT2hsYVNuWHJqVjFrTWpOakhkSUZIN2JUU1pxR0kyQTMwb2E0K0M2M1pndk5iUG5PbWpkcjZLKyt5aWtmY1l6ZmRKQnRNK1BBbjArb1pOOGFvMndpc0gyQWU5WXVhbHozbXVkSHplOGc3ZWFLT2NoaFRoUWt3Q1psQTNDTU12YWozNmxiTFBSS0xXUlpCWmNVWG1OQm1QVEFncWNOWldiVkNHOC9IQkRac0NkNU44Y2d4bmsyQ3B6T04yNXpZcGoxVHhWM2dFMVczMEJZSVo0Qm9JeUlwL0dxR3RpOUl5dGJsbHdqbFRhTlc0QkhybnMzOEFlOTZkTEdyWS9xcnA4elplNXlqMko3S3Fwb0MyTDl1MGJVaEh1NlNIYnRmT1VVOVJ1a2JiZTZMSEVReFQyemUwTEZwWHo2VmNmaDBBL24wdGFHaGEzRVp0T3RDQzI4eFBVWFdmVDBLYXVCMkdkbWFlaVM3SXdWODN4QllZTm9CSGJ1TmVEaDFTR3JTVTByUXhPcnVaOWxRbDNFUTh5eElVdGN5enhjSG1aaysxTStnaGdab3V6Y3RQSURzM1V1ZTBBeC9JQVNuMUlON3hNdDFxMzR1eUFoRVVPWWJyV0JpU2ZTWjRTQXZVeXNVTGhkMzhnSmdQNmdwdGRXWUwzOEhjMHZXeFNVOGJpWUJBL0o4WjcycWNvYnNkZ1RYcElQRVJVWEhrZFZYbXQ1ZTRhTG5id0tFQmM2UTMyQWlhYXV2ZXJ2K2dFQ0VSNGtYbVovZ3ArN3dOSFMwOXJiM09Edjh2UVJPRHRQWm5PZ3A2cTMzTjBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQThkTXo4PTAPBgsqgRyG7zICAwEBAQUAA4IJdQBUBwADG5wZ6YuxF1G9t2q+0MEB5zUvlgQIn50Sx9eWRvlePb/m63/qRN7nVhvgw6/tWMsndEjKxt50N8rxusDEZOvQLY0+coUD5D+p1wU1YyYEqS8HAwoDAOdaaCe1h0fI2JqVX8pxl8LzJQ3I1sxfXIY+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")
	//确认按钮
	confirm := buildButton("确认", func() {
		inputCert := inputCertEntry.Text
		detail.RemoveAll()
		decodeCert, err := base64.StdEncoding.DecodeString(inputCert)
		if err != nil {
			decodeCert, err = hex.DecodeString(inputCert)
			if err != nil {
				fyne.LogError("解析请求错误", err)
				return
			}
		}
		//MIICETCCAbWgAwIBAgINKl81oFaaablKOp0YTjAMBggqgRzPVQGDdQUAMGExCzAJBgNVBAYMAkNOMQ0wCwYDVQQKDARCSkNBMSUwIwYDVQQLDBxCSkNBIEFueXdyaXRlIFRydXN0IFNlcnZpY2VzMRwwGgYDVQQDDBNUcnVzdC1TaWduIFNNMiBDQS0xMB4XDTIwMDgxMzIwMTkzNFoXDTIwMTAyNDE1NTk1OVowHjELMAkGA1UEBgwCQ04xDzANBgNVBAMMBuWGr+i9rDBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABAIF97Sqq0Rv616L2PjFP3xt16QGJLmi+W8Ht+NLHiXntgUey0Nz+ZVnSUKUMzkKuGTikY3h2v7la20b6lpKo8WjgZIwgY8wCwYDVR0PBAQDAgbAMB0GA1UdDgQWBBSxiaS6z4Uguz3MepS2zblkuAF/LTAfBgNVHSMEGDAWgBTMZyRCGsP4rSes0vLlhIEf6cUvrjBABgNVHSAEOTA3MDUGCSqBHIbvMgICAjAoMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LmJqY2Eub3JnLmNuL2NwczAMBggqgRzPVQGDdQUAA0gAMEUCIG6n6PG0BOK1EdFcvetQlC+9QhpsTuTui2wkeqWiPKYWAiEAvqR8Z+tSiYR5DIs7SyHJPWZ+sa8brtQL/1jURvHGxU8=
		//MIIEfjCCA2agAwIBAgIQefIDuSADkosPySFwsKcsjDANBgkqhkiG9w0BAQsFADBQMQswCQYDVQQGEwJDTjEmMCQGA1UECgwdQkVJSklORyBDRVJUSUZJQ0FURSBBVVRIT1JJVFkxGTAXBgNVBAMMEEJKQ0EgRG9jU2lnbiBDQTMwHhcNMjAxMjA3MDc1MDAwWhcNMjExMjA3MDc1MDAwWjBIMQswCQYDVQQGEwJDTjElMCMGA1UECwwcYmI1Tndlbk5kYVg2ZkhNd1VKUlkvQTFOVDcwPTESMBAGA1UEAwwJ5p2O5Li96ZyeMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzeiCgLXKDzzBsLLHedJKG11m6SotdlynexHe8cI1TmWa3ODerwBHukr5ZkJft3seIQqFHi6xVlNgfOHO5WNgCKpvg/HxRoQshwLDYgeH5KcpH67dv1dl6urqwvwzSE5gmJo1+OGqAl9yeG9X76zkueZUd4v3RrVOoofbTlSBkWoigXH/0mpu/vgxhDRzmksNQvZ+Ay2jisdshpZovH6a+ABYMYMYo4U1o6BfvHBKEPo20TDJ/t0KlVRoHkgiMvtO8NOI5d0cxea5RaOCDT10CGHheqieMibUQnCkB6Yi01aoDQxtG8TshO7uGWoMzqPPs+u44Ym1s2LH51fvTS6bHQIDAQABo4IBWjCCAVYwcQYIKwYBBQUHAQEEZTBjMEAGCCsGAQUFBzAChjRodHRwOi8vcmVwby5iamNhLmNuL2dsb2JhbC9jZXJ0L0JKQ0FfRG9jU2lnbl9DQTMuY3J0MB8GCCsGAQUFBzABhhNodHRwOi8vb2NzcC5iamNhLmNuMB0GA1UdDgQWBBQh7RHFVos8ievEiiAvASMjEmqw+zAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFCA6epfxEmaXv3PW5YXPR9M0GLwyMD0GA1UdIAQ2MDQwMgYJKoEchu8yAgIWMCUwIwYIKwYBBQUHAgEWF2h0dHBzOi8vd3d3LmJqY2EuY24vQ1BTMEQGA1UdHwQ9MDswOaA3oDWGM2h0dHA6Ly9yZXBvLmJqY2EuY24vZ2xvYmFsL2NybC9CSkNBX0RvY1NpZ25fQ0EzLmNybDAOBgNVHQ8BAf8EBAMCBsAwDQYJKoZIhvcNAQELBQADggEBAF5apKpbT9EG+gJP82LKKwbW9/jUJ/9tZEzPKfX4Uqs7YB3DCnM78qLBKvHByP9bUv2L7Yd6ncv9FORJqw6KEJiNz6/wXcNsNN/MYj8tZNonMyTW+tGkoRR0AqPWHZ1Cq+M0LFYuL8uwkMXDPZiHrrwtwNrr5cSsrYiamDyoZAe6MRzBiU9WgpzGWbMPu+IRoYye04Cq/yEVBsHLnUR24wehUVgPJb68tR7j3M3Yc3gSbTb9ymFFfETxaf2qDUelnr7CqhM/Ddj77dnZ86ZUGi95l7SDeEQW56EL9Og4TnLuL7A0tOPZhADwY5mgiQbLiMziO7szirh8wK8R5njJ9gI=
		certificate, err := cert.ParseCertificate(decodeCert)
		if err != nil {
			fyne.LogError("解析证书错误", err)
			return
		}
		//构造证书解析详情
		keys, value := buildCertificateDetail(certificate)

		//展示证书详情
		showCertificateDetail(keys, value, detail)
	})
	//清除按钮
	clear := buildButton("清除", func() {
		inputCertEntry.Text = ""
		inputCertEntry.Refresh()
	})

	//对所有按钮进行表格化
	allButton := container.New(layout.NewGridLayout(2), confirm, clear)
	structure.Add(inputCertEntry)
	structure.Add(allButton)
	structure.Add(detail)
	return structure
}

func buildCertificateDetail(certificate *Certificate) (keys []string, certDetail map[string]string) {
	certDetail = make(map[string]string)
	//有序的key放切片，值对应在map
	keys = []string{"SerialNumber", "SubjectName", "IssueName", "NotBefore", "NotAfter", "PublicKey", "PublicKeyAlgorithm", "SignatureAlgorithm", "KeyUsage"}
	//SerialNumber
	certDetail[keys[0]] = hex.EncodeToString(certificate.SerialNumber.Bytes())
	//SubjectName
	certDetail[keys[1]] = certificate.Subject.String()
	//IssueName
	certDetail[keys[2]] = certificate.Issuer.String()
	//NotBefore
	certDetail[keys[3]] = certificate.NotBefore.String()
	//NotAfter
	certDetail[keys[4]] = certificate.NotAfter.String()
	//PublicKeyAlgorithm
	certDetail[keys[5]] = base64.StdEncoding.EncodeToString(certificate.RawSubjectPublicKeyInfo)
	//PublicKey
	certDetail[keys[6]] = ParsePublicKeyAlg(certificate.PublicKeyAlgorithm)
	//SignatureAlgorithm
	//.String()被重构
	certDetail[keys[7]] = certificate.SignatureAlgorithm.String()
	//KeyUsage
	certDetail[keys[8]] = cert.ParseKeyUsage(certificate.KeyUsage)

	return keys, certDetail
}

func ParsePublicKeyAlg(alg PublicKeyAlgorithm) string {
	switch alg {
	case RSA:
		return "RSA"
	case SM2:
		return "SM2"
	case ECDSA:
		return "ECDSA"
	case Dilithium:
		return "DILITHIUM"
	case OTS:
		return "OTS"
	case Kyber:
		return "Kyber"

	default:
		return ""
	}

}

// 将证书详情以表格的形式添加在最后
func showCertificateDetail(orderKeys []string, certDetail map[string]string, box *fyne.Container) {
	for _, orderKey := range orderKeys {
		key := widget.NewLabel(orderKey)
		data := certDetail[orderKey]
		value := widget.NewEntry()
		if len(data) > 100 {
			value = widget.NewMultiLineEntry()
		}
		value.Wrapping = fyne.TextWrapWord
		value.SetText(data)
		//防止值被修改
		value.OnChanged = func(s string) {
			text := certDetail[key.Text]
			value.SetText(text)
		}
		realKey := container.New(layout.NewGridWrapLayout(fyne.Size{150, 30}), key)
		realValue := container.NewStack(value)
		line := container.New(layout.NewFormLayout(), realKey, realValue)
		box.Add(line)
	}
	box.Refresh()
}

func buildInputCertEntry(data string) *widget.Entry {
	inputCert := widget.NewMultiLineEntry()
	inputCert.SetPlaceHolder(data)
	inputCert.Wrapping = fyne.TextWrapWord
	return inputCert
}

func buildButton(data string, fun func()) *widget.Button {
	button := widget.NewButton(data, fun)
	return button
}
