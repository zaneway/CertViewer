package window

import (
	"CertViewer/cert"
	"encoding/base64"
	"encoding/hex"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	. "github.com/zaneway/cain-go/x509"
)

// 构造解析证书核心图形模块
func Structure() *fyne.Container {
	structure := container.NewVBox()
	structure.Resize(fyne.NewSize(300, 300))
	detail := container.NewVBox()
	inputCertEntry := buildInputCertEntry("please input base64/hex certificate data")
	//inputCertEntry.SetText("MIIUYzCCA4WgAwIBAgISEAEQJAkjFhrlAD1kfcQ46VYcMA8GCyqBHIbvMgIDAQMBBQAwOTELMAkGA1UEBhMCQ04xDTALBgNVBAoMBEJKQ0ExDTALBgNVBAsMBEJKQ0ExDDAKBgNVBAMMA09UUzAeFw0yNDA5MjIxNjAwMDBaFw0yNDA5MjQxNTU5NTlaMFgxGjAYBgNVBAMMEeadjuaAneaAnSjmtYvor5UpMQswCQYDVQQGEwJDTjEtMCsGA1UECwwk5YyX5Lqs5pWw5a2X6K6k6K+B6IKh5Lu95pyJ6ZmQ5YWs5Y+4ME0wDgYMKoEchu8yAgMBAwICAzsABDgAAAASDZ9nxWRR9rgnVJcMvjj+4AAAAACg1+dDZvt7zX5b4wSd55p+W5bV2uNrvh6tAjFsWvi3UaOCAlMwggJPMA4GA1UdDwEB/wQEAwIGwDAJBgNVHRMEAjAAMAsGAyoDZgQEMTIyMjAKBgVSAgICAgQBMDASBgoqgRyG7zICAQoCBARYWFhYMA0GBYFsAhkbBARYWFhYMIGJBgNVHR8EgYEwfzBBoD+gPaQ7MDkxDDAKBgNVBAMMA09UUzENMAsGA1UECwwEQkpDQTENMAsGA1UECgwEQkpDQTELMAkGA1UEBhMCQ04wOqA4oDaGNGh0dHBzOi8vMTkyLjE2OC4xMTIuNTY6MTgwNjAvY2F3ZWIvY3JsL09UUy9PVFNfMC5jcmwwHQYDVR0OBBYEFF8edOgbZvtjyI3vnefD34MkGJFfMB8GA1UdIwQYMBaAFAcL6tKhQIwpDHSLDS2oN9glw7MNMFoGA1UdIARTMFEwTwYKKoEchu8yBgQBATBBMD8GCCsGAQUFBwIBFjNodHRwczovLzE5Mi4xNjguMTEyLjU2OjE4MDYwL2Nhd2ViL2Nwcy9PVFMvY3BzLmh0bWwwgc0GBCkMCwIEgcRleUpKUkZSNWNHVWlPaUl4SWl3aVNVUk9kVzFpWlhJaU9pSkpVSEZZU2psMFMweDJhekY2UjNCUU1WTnpWSGsxYlRCRU9URkVOekpPYVVaaGVsUTRORTVFZFN0alBTSXNJbEpoZDBoaGMyZ2lPaUp2YjNZM01IUTVhVzlvYTBSdVVpOU9hbkJuYURjeWJIUkNORUp4ZVVoVVJFMW1MM05hVlZvMk5IVkJQU0lzSWtoaGMyaGhiR2NpT2lKVFRUTWlmUT09MA8GCyqBHIbvMgIDAQMBBQADghDFAAAAABIvQY8mLvspvV0G82gbfLLXxS0nJt9KKIqUjNJuxQC87C7v4QS+JTQWL38AYcaKpO1U/E6xfGHAnaitD0DVMwkFPWBtJO9IPx0J7+AaGqtkexosyB3kIgmj73tBZMXoNVKW3fvNRSMJQ2XAyAToLAmXzCH8GNTdKbPmHOBSTQwfFWoURif686LPNaNyzvXYgSW4O0NTOj0ezyP/9j4jSUUwsl0CSkr4SpxARnMsgJecKWguqhT7pAvA1DMo+zvnVJIA7UFMF5lOoe+mP1VFliq583iwu3F5uT5TIEAv7dFRAVZyPca5bwlw3fYvo2bFXWjCntuU2t2fCq0Ucya84RMjuCB2q1J7QDy7KG6DFdve9pyTmkfA2QnGRVveLH3RlOo51J0Djokt2apiGULk2CMduvibm8C9TjpJRr1arRGpMss6RzpTHtKrV50zum593o2HxbIQcXesGid+uvo6uMK50oxInWldO+WYJrqg7xABrOsk5pkTn8a8j3TsQJjxdJrns/Za72MZFmJsNYrrS9sGTgVVBDbHVKiiY+6akGwU7h8kfeah3FApQYT36wDwm2gPzSgqGq/XBzipRyj/HubcTFvZnQyR7KMZ6GsQfIdL9WyaPVaQ64kUgWJxNr4h6iyRuYdIRgO81Z0agVD4Cz1YyL+0dyungpHOKIXsplq9kawtQNzp8coBitAtePkUs1tL+cSWFS3ZBYb8gjk3ZRuICE/1kTSaBlRw5qmj50ablfuH4VmwHOyRem8r/IcEP6kWQqxbH/G6TGh2uiul6Vb8xQu8p/yhdG8mY5nJBXGqAKvxJ3xZotPez37z6smHebrs9SoYKfvjer9+5UpKaAyTEZ5PWi7bqIP3kTGfy5Ck2DtekZQEjc8HQeV16vsinOTTV34NYN8SO8XHpvSlkhbgxMz9RAoh0ej2dqn6B5u4QDVRJoB7U0kIdwfOf/lUwFFrWKOYy78XNdgq+2ARvbcfWyWuwK09ef1L3jO/WSgTITisGcEIgv4RZ7N06VxILySgs4hzEP4vGC45sIE7BnT4JU5XEiAX5z9TJowhjp74/2UdlEoY3VIfwU3mgpND41KH8sZ7IgtlJpAS0gg/ldBZXu1UClCtjV4tZlxA1m2FKY+H7o79HnPlKbET3CjoxT0mY/yzFE8nHcXifizZgFIVXxegilpCt+cOAmooge/Sn6Lr4lGen26bTbRl0kXGiLISQTNdqneV/arKCL7x0UatvbU3062hfYtEsutZ2F7EFgix86nVF2Gwpyj0IzZ0jlYhx9dbjvoHt6lskVgyMwLPzCmAsdNGqTK+3MjTqNjPyepcENyANsbq9J8cD5W979N0NuBgsT7hy8txJa7ZCKE2+L0IoNjPyju6+71d69hD2oH16Se2zYX+xX7mSt67hM9zNW/BCntghjudfNx+KvAJ7L7mPbjEsMweB39b4ntgZ+g4wk3vbGTHajoEmhKpvN2zVcpdHDYuiG0X8USy2ZkC5DNF5BXX9Ulvh3C2Kdbv1r2qj2UpU7dq2oDIcDVqspvrKundzkjJDmr2mBR4Wj4JQM3XlaJ5uk3N1rPeXenZgvYjY7wScEOgXwZdPNm+7Y8DWRTgq8pswf/tu+s9KEUkmt9cU+mLkRX59Xw07peeTErYOayQY4O2CI+yRzXhzPTEOOvDFsne+1nPYzQJE/Qg65wcPQ/I0t81ulewF4GN3dZBvITCvBmfNyKoK5EAlNTMTJOXZxjfRW3Q8fiShiFoR6PcoalxgWnOeKq0RlOMullAn2Fs2JqngbNrMg4RQiI3A/l1SbDYuLk30nLngEQDR8auvAnKsJE97d5bbvEaStZK2cIypLTf9knzbPbmuSYgAGLovYYOcHXdKthEHp6Yibdil4xxdjCgEwUgi16QJCXzBgsJ1jX5dkTikGHFGh9v5UcsK15INiMjLb/0IJdxWTPzNnIRxtwWQo6dqIJtvkxuKBcwJDFVospGSB1XwMZI9y7rnCWr5IS1hIrzXa73F/2Zf7dZGIOqlLGpBOiSQET2VkDJRNAbSDqlUP96VH2XatLHUyAUqnJzHunwMNtxiJfJl8yDrKo378jXAFw6soMK1nRC+8l263yqqtz9i311nFgWwUb3oPiqwb/MUUNJAHKenXOsl7CxUvguJUYA4IuNzJV5Vc6IJ/44frotbQna4pxPIIhvXrWvSeTdQ+daapSIoYThNjWxWyTcSnImZ9y1RxwfwUUAjnUIjIuMbFI/4LVowIv5JkzhQXmNueOknweew2PfSwml2OSse6JOPd3Beb0ulKNh4IGlOyYdsXnX8zgVdsIadKsi/JeulRDj794qec/TYy8iyO3pLxcSnp3KkXWPMF73pnIOklmOhIV/HqjGu8vYmO0r0zdACgIYXdb8jFDklgQM3F6qJHaHA+FFsNUZ6CuUEZz5t4SLpAmuLfgmoojdNwzw72sieW2LJnZPtrfshfhQMCdo/wBxyYFl7KBoszBZF8sSa/wZiEoo/Jyi1qBCsS8HGOoHnFHgPIJfCXJgRyFnGh3abH9zrPmFQkhs90j9IIyZapmTuMYflZde94s6L7LJdXGUsRlj49dfvCgW2zKZAcS3+wOaI0RSphjxM8pmW7la4mfIrALRJWQiJrcEiuRuM6sriy7D3pDkgfhGxZo2lHBjsufvVp3WUL/nkMyU1AELpkJ8KYPRpN4VouFA+xIxSbp91MkYu5R/eF/LFI9LwC9nQCUgzNqRqXowG2e1LyUIaNMbYosi7qTc2Lg9iUxjVAyU/38NUEwKLJzNZvnqtgKRrpBgyyzuZKdBBD0b7e8qjyVT5UW5dzz3i1wdkdkiItQZbOr+rAdFdbwmalf+8RLZNZmnHx5jlhKC/tjog3spbp52k/sOWX5Me3pj4h+teoMxJyaOulIbZ/MlI8jnlXj7HsGDeL5Uyi/I9UvUBOnFXZ1ynX+XZq1+UNdt4nxH1LK39vR9/jzjMnEoI0a/xb8YMA+EO+PZRhz1GN5VETddOIZ+KaCT4Xj97wAtBTKiYVARbmYHPW3leqBwSadVSfierXeM9CrKmClzHfi+FNZk9RCkjKPTrBB8i8td2Z7M9ZhiVnpFzL6kno7ZCL/+KByPfCJazp8lUqUvkjMB2HGf4XJZuNvtocjc/51K9DgsfcIFDMxEOYf9P6cyX4qIfFnMEQDTb9+6i3jreddJYfvYatGanDKUWJcXIs2jCqGdDGx5KxSHVZsd2/3Dqo0ZXEr5Rnb+sbjY3MQeBiOdF8qO5u1qIdFcX52dDnqJU0yygOzAaFE6IV/rSgWXoJpqcDHJXOGePZeXe0ejXzet8nFgGH4xVmG97zj7cSE6lxuh2M+bkPvdyi9Zl43pMD2hFGwhM+rBx+jzuvkKzAB+/MCzIVnk51T3+tWR9gqPV4q+uBUmzJMSxE+XNnujB3n+sxZIDsGxF3qbPNzIPh6Mbbxjo+kS7Vc4Y5sDs56gzXKaByk4kmkQGLikV6EWRvuxV+mTro7l4wPclWuME7PyoRh+OCfaxxk/ekoIFNhzMAFvuF6WOPyyuUBKGl47Fx/dcDQdfZlW8mGav13mgM+9a92RUl5+KT0dFyb5+FdYmpVfYNgCvoA1j83k4QnWNUp8iVLlUZvbc70CQbS6Bf5mkgrWQlqrrvJScydSYHaAh5/84ouBihSmZjNw8hsDt4mgb29PD++UKhtDrpF3hZmNbwqls+5b6f1c6AxMjr3eg1eVplbBzQlksKnJ7IgVkX7id38EY3wLLUpm7LSUNHXoZB/emMgfNxa63wg721KUxnhCuzv6zNwurzatGqsML5DUveH25P6w/xXCRDdU+yWMWyNA7xeaJ3y32k+6QrNFLHowZxGMAJFeWVEuYr1V5Wr/gL1GsNYEBhC6dlTICnS6jAOQ58TkTGhBm+QKVzNUzjGj5NV4Bg7hMQogyXjpvdH7ywtmkeCsGb1P6is26DRDFxuBZgmnXUnNZFFsJhidLd7+9vR9L7qMAZ5W4vckuqkNQnUqEozp16sgEmPhL6++Zhl4+A6ByO1ASur+fl4AI2uuIxurzfcm3IN9+KHd+Ot7f3tAPKO+S+9VTezLucJNTmmi51aX5ja9lrqtk9qICctB1A/9PSA3hTp2TYDuD/wxgMf3jw8SF5EVmA4zW+bUuTV6VWVLcyHY4JhKkUD6SbArihxoQR9ik7R2UxMg6+GjNfQeMv1OarUOL2gOipCVWBsTI3LFyAjYGF9tZa/Bs1grf29bSNp3IwQ5nLCMx3XxuMamtotVP4P5D+1KhAo1UoDqGpBhGc1OwDpQNRJLNIaJ5KNmwkLN+U3wuPIKBasGM0rJNWuFlJHlehnDKN+dj8byhrpiHgZrwP0unBJ4Ee41imAyBL2srpiB1hTdFAsPTvxE3kG291B01pQZ1b87txOrlf3Ao4gm0z/3FS+kAhlp4Myd8CIt2J6io/SiFgZU+P7diW3ZhkplLfdXkSkNTqeJA/gc/WsGcqvYRWf4AVSt9GrxYCfERDk2ZTiOFMNJe7PE12zKLewLeAkQcA7er5/ao5mfi+HUpSXyD8v+a72Cj2stD7tC/P/xjoiFPmB3dN+rCAtdu2eEk3hSOGVMQZoqryBZ3DbjV63D7G7X2bQ9YLo6C7uzNTTeUhw2tagQkLnHJFhfjb1XrZLqWZnwb4ki8BxT9Zf+LGnWr//22dRU413On7z8BBrRwaUnv2xOyvuGghOYCCrEkHjXyvQ3wg0DnhzLW8mEnn7kbWbfVbx6N6sKl3+K+sHaxuoUfxPxE8ZxYkR/KheIGHfywIfIZOc+1zeEpIQOYVoLAznouhxKbe6LXDir8xwMHm1B3S0I11nkP9NYZY6ELCo/fQobDE4iexKtLwVnr5+knne8Rto5VSqdXpiKgNEKMgvSaq2/iiRVPOtI09uGWL0ksTEPZrKxtQ90uQ3Oh6dT3C++U1GAt4/A7baqsZrcAd94PQ1z+tdqGjIUtSO/wLlVn87X9ybaRCi4ivFh8CCrEyfKBYGtEZLRxdXwub+S8bBcXsV7uqVO80DrrXUWWLuNTxGjkKJ0jEOqriLteT/ycm4xlPi0lFO77wpWBcf3VAPMkHLdrSsFEYtB83HJzJlVW1MRC6NhQpit+MGxrCwxUra8opxNzrmC5SIesI+10Afmvcx1SaLjSeTEIPfW8Jmj0R+2lm7JAgvxT0u0hJrv+7txhoEsCj9IuoY3OggqFQM49+G8OoQlZ+BaQMWbGb98i4c3tbcajptzuiw7TXVX8GCQf5xO1U6+TOraxKe+h3GJq0B+TCmiZmhzQ8RCvaR7Z4I9J2qvnB25Yy+xp/Kq6ec/lYn7hVKN1Zbhbos9pPBcPs/8OJCOJa74fUq85YSVO6ZcDl9/CclI2ziG84Gki2K6FtV4aWg5WV+iuFusxtVL5MaJZH5hoM63acaDYcnWLPEjPckh6+6UnFddLq9gi6kWcOg24WrP3EoEH3l/Jdp+g1pkW4W4r2vm90DFhbMn1jqCRNKVrVbbJtbFhEP+9oNpvz6KAeriFrW9aoMDHZ8HEHpTaCn9mMg9gD+IkY0qPqBIFli4SvT6UN3wd279zOT3MfjiPs2GIBTXxhhhtznp+0ZWBND1AR8drVJbRItvSjNPbxUyzvWsCLNwwD8QKP99AEVQbVPg8rf+gzZHpwN7LXzMcJLUJludW2W0v/5eqCGNtdMWYkt2n1mbuvfTwVpenuAjPFrIJktt")
	//确认按钮
	confirm := buildButton("确认", func() {
		inputCert := inputCertEntry.Text
		detail.RemoveAll()
		decodeCert, err := base64.StdEncoding.DecodeString(inputCert)
		if err != nil {
			decodeCert, err = hex.DecodeString(inputCert)
			if err != nil {
				fyne.LogError("解析请求错误", err)
				return
			}
		}
		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
		certificate, err := cert.ParseCertificate(decodeCert)
		if err != nil {
			fyne.LogError("解析证书错误", err)
			return
		}
		//构造证书解析详情
		keys, value := buildCertificateDetail(certificate)

		//展示证书详情
		showCertificateDetail(keys, value, detail)
	})
	//清除按钮
	clear := buildButton("清除", func() {
		inputCertEntry.Text = ""
		inputCertEntry.Refresh()
	})

	//对所有按钮进行表格化
	allButton := container.New(layout.NewGridLayout(2), confirm, clear)
	structure.Add(inputCertEntry)
	structure.Add(allButton)
	structure.Add(detail)
	return structure
}

func buildCertificateDetail(certificate *Certificate) (keys []string, certDetail map[string]string) {
	certDetail = make(map[string]string)
	//有序的key放切片，值对应在map
	keys = []string{"SerialNumber", "SubjectName", "IssueName", "NotBefore", "NotAfter", "PublicKey", "PublicKeyAlgorithm", "SignatureAlgorithm", "KeyUsage"}
	//SerialNumber
	certDetail[keys[0]] = hex.EncodeToString(certificate.SerialNumber.Bytes())
	//SubjectName
	certDetail[keys[1]] = certificate.Subject.String()
	//IssueName
	certDetail[keys[2]] = certificate.Issuer.String()
	//NotBefore
	certDetail[keys[3]] = certificate.NotBefore.String()
	//NotAfter
	certDetail[keys[4]] = certificate.NotAfter.String()
	//PublicKeyAlgorithm
	certDetail[keys[5]] = base64.StdEncoding.EncodeToString(certificate.RawSubjectPublicKeyInfo)
	//PublicKey
	certDetail[keys[6]] = ParsePublicKeyAlg(certificate.PublicKeyAlgorithm)
	//SignatureAlgorithm
	//.String()被重构
	certDetail[keys[7]] = certificate.SignatureAlgorithm.String()
	//KeyUsage
	certDetail[keys[8]] = cert.ParseKeyUsage(certificate.KeyUsage)

	return keys, certDetail
}

func ParsePublicKeyAlg(alg PublicKeyAlgorithm) string {
	switch alg {
	case RSA:
		return "RSA"
	case SM2:
		return "SM2"
	case ECDSA:
		return "ECDSA"
	case Dilithium:
		return "DILITHIUM"
	case OTS:
		return "OTS"
	case Kyber:
		return "Kyber"

	default:
		return ""
	}

}

// 将证书详情以表格的形式添加在最后
func showCertificateDetail(orderKeys []string, certDetail map[string]string, box *fyne.Container) {
	for _, orderKey := range orderKeys {
		key := widget.NewLabel(orderKey)
		value := widget.NewEntry()
		value.SetText(certDetail[orderKey])
		//防止值被修改
		value.OnChanged = func(s string) {
			text := certDetail[key.Text]
			value.SetText(text)
		}
		realKey := container.New(layout.NewGridWrapLayout(fyne.Size{150, 30}), key)
		realValue := container.NewStack(value)
		line := container.New(layout.NewFormLayout(), realKey, realValue)
		box.Add(line)
	}
	box.Refresh()
}

func buildInputCertEntry(data string) *widget.Entry {
	inputCert := widget.NewMultiLineEntry()
	inputCert.SetPlaceHolder(data)
	inputCert.Wrapping = fyne.TextWrapWord
	return inputCert
}

func buildButton(data string, fun func()) *widget.Button {
	button := widget.NewButton(data, fun)
	return button
}
